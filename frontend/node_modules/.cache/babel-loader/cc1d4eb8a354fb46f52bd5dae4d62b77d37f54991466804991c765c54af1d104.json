{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manin\\\\Downloads\\\\Final Project\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\PlaneLog.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Paper, Typography, List, ListItem, ListItemText, Box, Chip } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaneLog = ({\n  planeId,\n  messages\n}) => {\n  _s();\n  // Filter messages for the current plane\n  const filteredMessages = messages.filter(msg => msg.plane_id === planeId);\n\n  // Only render if there are messages for the plane\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // Cleanup effect to remove messages when component unmounts\n  useEffect(() => {\n    return () => {\n      // Implement logic to remove messages for the plane when it exits\n      // This can be done by updating the parent state to remove the plane's messages\n      console.log(`Cleaning up messages for plane ${planeId}`);\n    };\n  }, [planeId]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2,\n      mb: 2,\n      flex: 1,\n      minWidth: 300\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Chip, {\n        label: planeId,\n        color: \"primary\",\n        size: \"small\",\n        sx: {\n          mr: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        children: [filteredMessages.length, \" messages\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        maxHeight: 200,\n        overflow: 'auto'\n      },\n      children: filteredMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        sx: {\n          py: 0.5\n        },\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: msg.message,\n          secondary: msg.timestamp,\n          primaryTypographyProps: {\n            variant: 'body2'\n          },\n          secondaryTypographyProps: {\n            variant: 'caption'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaneLog, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = PlaneLog;\nvar _c;\n$RefreshReg$(_c, \"PlaneLog\");","map":{"version":3,"names":["React","useEffect","Paper","Typography","List","ListItem","ListItemText","Box","Chip","jsxDEV","_jsxDEV","PlaneLog","planeId","messages","_s","filteredMessages","filter","msg","plane_id","length","console","log","elevation","sx","p","mb","flex","minWidth","children","display","alignItems","label","color","size","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","maxHeight","overflow","map","index","py","primary","message","secondary","timestamp","primaryTypographyProps","secondaryTypographyProps","_c","$RefreshReg$"],"sources":["C:/Users/manin/Downloads/Final Project/frontend/src/components/Dashboard/PlaneLog.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Paper, Typography, List, ListItem, ListItemText, Box, Chip } from '@mui/material';\r\n\r\ninterface PlaneLogProps {\r\n  planeId: string;\r\n  messages: Array<{\r\n    timestamp: string;\r\n    plane_id: string;\r\n    message: string;\r\n  }>;\r\n}\r\n\r\nexport const PlaneLog: React.FC<PlaneLogProps> = ({ planeId, messages }) => {\r\n  // Filter messages for the current plane\r\n  const filteredMessages = messages.filter(msg => msg.plane_id === planeId);\r\n\r\n  // Only render if there are messages for the plane\r\n  if (filteredMessages.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Cleanup effect to remove messages when component unmounts\r\n  useEffect(() => {\r\n    return () => {\r\n      // Implement logic to remove messages for the plane when it exits\r\n      // This can be done by updating the parent state to remove the plane's messages\r\n      console.log(`Cleaning up messages for plane ${planeId}`);\r\n    };\r\n  }, [planeId]);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 2, mb: 2, flex: 1, minWidth: 300 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n        <Chip \r\n          label={planeId} \r\n          color=\"primary\" \r\n          size=\"small\" \r\n          sx={{ mr: 1 }} \r\n        />\r\n        <Typography variant=\"subtitle2\">\r\n          {filteredMessages.length} messages\r\n        </Typography>\r\n      </Box>\r\n      <List sx={{ maxHeight: 200, overflow: 'auto' }}>\r\n        {filteredMessages.map((msg, index) => (\r\n          <ListItem key={index} sx={{ py: 0.5 }}>\r\n            <ListItemText\r\n              primary={msg.message}\r\n              secondary={msg.timestamp}\r\n              primaryTypographyProps={{ variant: 'body2' }}\r\n              secondaryTypographyProps={{ variant: 'caption' }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}